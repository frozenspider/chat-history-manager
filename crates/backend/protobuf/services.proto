syntax = "proto2";

package history;

import "scalapb/scalapb.proto";
import "crates/core/protobuf/entities.proto";

option (scalapb.options) = {
  package_name: "org.fs.chm.protobuf"
  flat_package: true
  single_file: true
  no_default_values_in_constructor: true
  enum_value_naming: CAMEL_CASE
  enum_strip_prefix: true
};

message Empty {}

// Service for the backend to communicate with the frontend
service FeedbackService {
  rpc ChooseMyself(ChooseMyselfRequest) returns (ChooseMyselfResponse) {}

  rpc AskForText(TextInputRequest) returns (TextInputResponse) {}
}

message ChooseMyselfRequest {
  repeated User users = 1;
}

message ChooseMyselfResponse {
  required int32 picked_option = 1;
}

message TextInputRequest {
  required string prompt = 1;
}

message TextInputResponse {
  required string user_input = 1;
}

//
// HistoryLoaderService
//

service HistoryLoaderService {
  // Parse/open a history file and return its DAO handle
  rpc Load(LoadRequest) returns (LoadResponse) {}
  rpc GetLoadedFiles(Empty) returns (GetLoadedFilesResponse) {}
  rpc Close(CloseRequest) returns (Empty) {}
  rpc EnsureSame(EnsureSameRequest) returns (EnsureSameResponse) {}
}

//
// HistoryDaoService
//

service HistoryDaoService {
  rpc SaveAs(SaveAsRequest) returns (LoadedFile) {}
  rpc Name(NameRequest) returns (NameResponse) {}
  rpc StoragePath(StoragePathRequest) returns (StoragePathResponse) {}
  rpc Datasets(DatasetsRequest) returns (DatasetsResponse) {}
  rpc DatasetRoot(DatasetRootRequest) returns (DatasetRootResponse) {}
  rpc Users(UsersRequest) returns (UsersResponse) {}
  rpc Chats(ChatsRequest) returns (ChatsResponse) {}
  rpc ScrollMessages(ScrollMessagesRequest) returns (MessagesResponse) {}
  rpc LastMessages(LastMessagesRequest) returns (MessagesResponse) {}
  // Return N messages before the given one (exclusive). Message must be present.
  rpc MessagesBefore(MessagesBeforeRequest) returns (MessagesResponse) {}
  // Return N messages after the given one (exclusive). Message must be present.
  rpc MessagesAfter(MessagesAfterRequest) returns (MessagesResponse) {}
  // Return N messages between the given ones (inclusive). Messages must be present.
  rpc MessagesSlice(MessagesSliceRequest) returns (MessagesResponse) {}
  // Count messages between the given ones (inclusive). Messages must be present.
  rpc MessagesSliceLen(MessagesSliceRequest) returns (CountMessagesResponse) {}
  rpc MessagesAbbreviatedSlice(MessagesAbbreviatedSliceRequest) returns (MessagesAbbreviatedSliceResponse) {}
  rpc MessageOption(MessageOptionRequest) returns (MessageOptionResponse) {}
  // Whether given data path is the one loaded in this DAO.
  rpc IsLoaded(IsLoadedRequest) returns (IsLoadedResponse) {}

  //
  // Mutable DAO endpoints
  //

  rpc Backup(BackupRequest) returns (Empty) {}
  rpc UpdateDataset(UpdateDatasetRequest) returns (UpdateDatasetResponse) {}
  rpc DeleteDataset(DeleteDatasetRequest) returns (Empty) {}
  // Shift time of all timestamps in the dataset to accommodate timezone differences
  rpc ShiftDatasetTime(ShiftDatasetTimeRequest) returns (Empty) {}
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  rpc UpdateChat(UpdateChatRequest) returns (UpdateChatResponse) {}
  rpc DeleteChat(DeleteChatRequest) returns (Empty) {}
  rpc CombineChats(CombineChatsRequest) returns (Empty) {}
}

message LoadRequest {
  required string key = 1;
  required string path = 2;
}
message LoadResponse {
  required string name = 1;
}

message GetLoadedFilesResponse {
  repeated LoadedFile files = 1;
}

message LoadedFile {
  required string key = 1;
  required string name = 2;
  required string storage_path = 3;
}

message SaveAsRequest {
  required string key = 1;
  required string new_folder_name = 2;
}

message NameRequest {
  required string key = 1;
}
message NameResponse {
  required string name = 1;
}

message StoragePathRequest {
  required string key = 1;
}
message StoragePathResponse {
  required string path = 1;
}

message DatasetsRequest {
  required string key = 1;
}
message DatasetsResponse {
  repeated Dataset datasets = 1;
}

message DatasetRootRequest {
  required string key = 1;
  required PbUuid ds_uuid = 2;
}
message DatasetRootResponse {
  required string path = 1;
}

message UsersRequest {
  required string key = 1;
  required PbUuid ds_uuid = 2;
}
message UsersResponse {
  // Contains myself as the first element. Order must be stable between calls.
  repeated User users = 1;
}

message ChatsRequest {
  required string key = 1;
  required PbUuid ds_uuid = 2;
}
message ChatsResponse {
  repeated ChatWithDetailsPB cwds = 1;
}
message ChatWithDetailsPB {
  required Chat chat = 1;

  optional Message last_msg_option = 2 [(scalapb.field).no_box = false];

  // First element MUST be myself, the rest should be in some fixed order.
  repeated User members = 3;
}

message ScrollMessagesRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 offset = 3;
  required int64 limit = 4;
}
message LastMessagesRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 limit = 3;
}
message MessagesBeforeRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 message_internal_id = 3;
  required int64 limit = 4;
}
message MessagesAfterRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 message_internal_id = 3;
  required int64 limit = 4;
}
message MessagesSliceRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 message_internal_id_1 = 3;
  required int64 message_internal_id_2 = 4;
}
message MessagesAbbreviatedSliceRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 message_internal_id_1 = 3;
  required int64 message_internal_id_2 = 4;

  // Maximum number of messages to be returned as a single slice
  required int32 combined_limit = 5;
  // Maximum number of messages to be returned from each side when abbreviated
  required int32 abbreviated_limit = 6;
}

message MessagesResponse {
  repeated Message messages = 1;
}
message CountMessagesResponse {
  required int32 messages_count = 1;
}
message MessagesAbbreviatedSliceResponse {
  repeated Message left_messages = 1;
  // If messages count was within the combined_limit, this will be zero
  required int32 in_between = 2;
  // If messages count was within the combined_limit, this will be empty
  repeated Message right_messages = 3;
}

message MessageOptionRequest {
  required string key = 1;
  required Chat chat = 2;
  required int64 source_id = 3;
}
message MessageOptionResponse {
  optional Message message = 1 [(scalapb.field).no_box = false];
}

message IsLoadedRequest {
  required string key = 1;
  required string storage_path = 2;
}
message IsLoadedResponse {
  required bool is_loaded = 1;
}

message CloseRequest {
  required string key = 1;
}

message EnsureSameRequest {
  required string master_dao_key = 1;
  required PbUuid master_ds_uuid = 2;

  required string slave_dao_key = 3;
  required PbUuid slave_ds_uuid = 4;
}

message EnsureSameResponse {
  repeated Difference diffs = 1;
}

message Difference {
  required string message = 1;
  optional DifferenceValues values = 2;
}

message DifferenceValues {
  required string old = 1;
  required string new = 2;
}

message BackupRequest {
  required string key = 1;
}

message UpdateDatasetRequest {
  required string key = 1;
  required Dataset dataset = 2;
}
message UpdateDatasetResponse {
  required Dataset dataset = 1;
}

message DeleteDatasetRequest {
  required string key = 1;
  required PbUuid uuid = 2;
}

message ShiftDatasetTimeRequest {
  required string key = 1;
  required PbUuid uuid = 2;
  required int32 hours_shift = 3;
}

message UpdateUserRequest {
  required string key = 1;
  required User user = 2;
}
message UpdateUserResponse {
  required User user = 1;
}

// Only allows modifying chat ID
message UpdateChatRequest {
  required string key = 1;
  required PbUuid uuid = 2;
  required int64 old_id = 3;
  required int64 new_id = 4;
}
message UpdateChatResponse {
  required Chat chat = 1;
}

message DeleteChatRequest {
  required string key = 1;
  required Chat chat = 2;
}

message CombineChatsRequest {
  required string key = 1;
  required Chat master_chat = 2;
  required Chat slave_chat = 3;
}

//
// MergeService
//

service MergeService {
  rpc Analyze(AnalyzeRequest) returns (AnalyzeResponse) {}
  rpc Merge(MergeRequest) returns (MergeResponse) {}
}

message AnalyzeRequest {
  required string master_dao_key = 1;
  required PbUuid master_ds_uuid = 2;

  required string slave_dao_key = 3;
  required PbUuid slave_ds_uuid = 4;

  // If set, everything starting at first mismatch and ending just before trailing match (if any) will be merged into
  // a single conflict if possible.
  required bool force_conflicts = 6;
  repeated ChatIdPair chat_id_pairs = 5;
}
message ChatIdPair {
  required int64 master_chat_id = 1;
  required int64 slave_chat_id = 2;
}
message AnalyzeResponse {
  repeated ChatAnalysis analysis = 1;
}
message ChatAnalysis {
  required ChatIdPair chat_ids = 1;

  repeated AnalysisSection sections = 2;
}
// This has internal IDs, those not corresponding to the type are unused
message AnalysisSection {
  required AnalysisSectionType tpe = 1;
  required MessageMergeSectionRange range = 2;
}
enum AnalysisSectionType {
  ANALYSIS_SECTION_TYPE_MATCH = 0;
  ANALYSIS_SECTION_TYPE_RETENTION = 1;
  ANALYSIS_SECTION_TYPE_ADDITION = 2;
  ANALYSIS_SECTION_TYPE_CONFLICT = 3;
}
message MessageMergeSectionRange {
  required int64 first_master_msg_id = 1;
  required int64 last_master_msg_id = 2;
  required int64 first_slave_msg_id = 3;
  required int64 last_slave_msg_id = 4;
}

message MergeRequest {
  required string master_dao_key = 1;
  required PbUuid master_ds_uuid = 2;

  required string slave_dao_key = 3;
  required PbUuid slave_ds_uuid = 4;

  // `..` is supported
  required string new_database_dir = 5;

  repeated UserMerge user_merges = 6;
  repeated ChatMerge chat_merges = 7;
}
message UserMerge {
  required UserMergeType tpe = 1;
  required int64 user_id = 2;
}
enum UserMergeType {
  // Only in master
  USER_MERGE_TYPE_RETAIN = 0;

  // Only in slave, add
  USER_MERGE_TYPE_ADD = 1;
  // Only in slave, do not add
  USER_MERGE_TYPE_DONT_ADD = 2;

  // Conflicts between master and slave, use slave
  USER_MERGE_TYPE_REPLACE = 3;
  // Conflicts between master and slave - or they match, use master either way
  USER_MERGE_TYPE_MATCH_OR_DONT_REPLACE = 4;
}
message ChatMerge {
  required ChatMergeType tpe = 1;
  required int64 chat_id = 2;
  repeated MessageMerge message_merges = 3;
}
enum ChatMergeType{
  // Only in master
  CHAT_MERGE_TYPE_RETAIN = 0;
  // Only in slave, add
  CHAT_MERGE_TYPE_ADD = 1;
  // Only in slave, do not add
  CHAT_MERGE_TYPE_DONT_ADD = 2;
  // Exists in both, act according to message merge decisions
  CHAT_MERGE_TYPE_MERGE = 3;
  // Exists in both, keep master
  CHAT_MERGE_TYPE_DONT_MERGE = 4;
}
message MessageMerge {
  required MessageMergeType tpe = 1;
  required MessageMergeSectionRange range = 2;
}
enum MessageMergeType {
  // Same in master and slave
  MESSAGE_MERGE_TYPE_MATCH = 0;

  // Only in master
  MESSAGE_MERGE_TYPE_RETAIN = 1;

  // Only in slave, add
  MESSAGE_MERGE_TYPE_ADD = 2;
  // Only in slave, do not add
  MESSAGE_MERGE_TYPE_DONT_ADD = 3;

  // Conflicts between master and slave, use slave
  MESSAGE_MERGE_TYPE_REPLACE = 4;
  // Conflicts between master and slave, use master
  MESSAGE_MERGE_TYPE_DONT_REPLACE = 5;
}
message MergeResponse {
  required LoadedFile new_file = 1;
  required PbUuid new_ds_uuid = 2;
}
