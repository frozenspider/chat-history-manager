syntax = "proto2";

package history;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "org.fs.chm.protobuf"
  flat_package: true
  single_file: true
  no_default_values_in_constructor: true
  enum_value_naming: CAMEL_CASE
  enum_strip_prefix: true
};

message Dataset {
  required PbUuid uuid = 1;
  required string alias = 2;
}

message User {
  required PbUuid ds_uuid = 1;
  // Unique within a dataset.
  required int64 id = 2;
  // If there's no first/last name separation, everything will be in first name.
  optional string first_name_option = 3;
  optional string last_name_option = 4;
  optional string username_option = 5;
  optional string phone_number_option = 6;

  repeated ProfilePicture profile_pictures = 7;
}

message ChatWithMessages {
  required Chat chat = 1;
  repeated Message messages = 2;
}

message PbUuid {
  // Should be lowercase!
  required string value = 1;
}

// The request with a id of the book
message Chat {
  required PbUuid ds_uuid = 1;
  // Unique within a dataset
  required int64 id = 2;

  // Can actually be none sometimes
  optional string name_option = 3;
  required SourceType source_type = 8;
  required ChatType tpe = 4;

  // Path relative to data root!
  optional string img_path_option = 5;

  // Always contains myself as the first element. The rest might be empty, e.g. if nobody ever wrote anything.
  // Members must be in some fixed order.
  repeated int64 member_ids = 6;
  required int32 msg_count = 7;

  optional int64 main_chat_id = 9;
}

message ProfilePicture {
  // Path relative to data root!
  required string path = 1;

  optional PictureFrame frame_option = 2;
}

message PictureFrame {
  required uint32 x = 1;
  required uint32 y = 2;
  required uint32 w = 3;
  required uint32 h = 4;
}

enum SourceType {
  SOURCE_TYPE_TEXT_IMPORT = 0;
  SOURCE_TYPE_TELEGRAM = 1;
  SOURCE_TYPE_WHATSAPP_DB = 2;
  SOURCE_TYPE_TINDER_DB = 3;
  SOURCE_TYPE_BADOO_DB = 4;
  SOURCE_TYPE_MRA = 5;
}

enum ChatType {
  CHAT_TYPE_PERSONAL = 0;
  CHAT_TYPE_PRIVATE_GROUP = 1;
}

/*
 * Design goal for messages - try to reuse as many fields as possible to comfortably store
 * the whole Message hierarchy in one table.
 *
 * Same applies to Content.
 */

message Message {
  option (scalapb.message).no_box = true;  // do not wrap in Option

  /**
   * ID assigned to this message by a DAO storage engine (even local one), always valid and >= 0.
   * Within a chat, guaranteed to be unique and properly ordered.
   * Might change on dataset/chat mutation operations.
   * Should NEVER be compared across different DAOs!
   */
  required int64 internal_id = 1;

  /**
   * Unique within a chat, serves as a persistent ID when merging with older/newer DB version.
   * If it's not useful for this purpose, should be empty.
   * No ordering guarantees are provided.
   */
  optional int64 source_id_option = 2;
  // Number of epoch SECONDS (not millis!)
  required int64 timestamp = 3;
  required int64 fromId = 4;

  repeated RichTextElement text = 5;

  // String that can be used to search this content.
  required string searchable_string = 6;

  oneof typed {
    MessageRegular regular = 7;
    MessageService service = 8;
  }
}

message MessageRegular {
  // Number of epoch SECONDS (not millis!)
  optional int64 edit_timestamp_option = 1;
  // If true, edit timestamp refers to deletion time (if known)
  required bool is_deleted = 5;
  optional string forward_from_name_option = 2;
  // References source ID
  optional int64 reply_to_message_id_option = 3;
  optional Content content_option = 4;
}

message MessageService {
  oneof sealed_value_optional {
    MessageServicePhoneCall             phone_call = 1;
    MessageServiceSuggestProfilePhoto   suggest_profile_photo = 13;
    MessageServicePinMessage            pin_message = 2;
    MessageServiceClearHistory          clear_history = 3;
    MessageServiceBlockUser             block_user = 15;
    MessageServiceStatusTextChanged     status_text_changed = 16;
    MessageServiceNotice                notice = 17;
    MessageServiceGroupCreate           group_create = 4;
    MessageServiceGroupEditTitle        group_edit_title = 5;
    MessageServiceGroupEditPhoto        group_edit_photo = 6;
    MessageServiceGroupDeletePhoto      group_delete_photo = 12;
    MessageServiceGroupInviteMembers    group_invite_members = 7;
    MessageServiceGroupRemoveMembers    group_remove_members = 8;
    MessageServiceGroupMigrateFrom      group_migrate_from = 9;
    MessageServiceGroupMigrateTo        group_migrate_to = 10;

    // Removed: group_call = 11, message_deleted = 14
  }
}

message RichTextElement {
  oneof val {
    RtePlain            plain = 1;
    RteBold             bold = 2;
    RteItalic           italic = 3;
    RteUnderline        underline = 4;
    RteStrikethrough    strikethrough = 5;
    RteLink             link = 6;
    RtePrefmtInline     prefmt_inline = 7;
    RtePrefmtBlock      prefmt_block = 8;
    RteBlockquote       blockquote = 11;
    RteSpoiler          spoiler = 10;
  }

  // String that can be used to search this content.
  required string searchable_string = 9;
}

message RtePlain {
  required string text = 1;
}
message RteBold {
  required string text = 1;
}
message RteItalic {
  required string text = 1;
}
message RteUnderline {
  required string text = 1;
}
message RteStrikethrough {
  required string text = 1;
}
message RteLink {
  // Empty text would mean that this link is hidden - but it can still be hidden even if it's not.
  optional string text_option = 1;
  required string href = 2;
  // Some TG chats use text_links with empty/invisible text to be shown as preview but not appear in text.
  required bool hidden = 3;
}
message RtePrefmtInline {
  required string text = 1;
}
message RtePrefmtBlock {
  required string text = 1;
  optional string language_option = 2;
}
message RteSpoiler {
  required string text = 1;
}
message RteBlockquote {
  required string text = 1;
}

//
// Content
//

message Content {
  oneof sealed_value_optional {
    ContentSticker          sticker = 1;
    ContentPhoto            photo = 2;
    ContentVoiceMsg         voice_msg = 3;
    ContentAudio            audio = 10;
    ContentVideoMsg         video_msg = 4;
    ContentVideo            video = 5;
    ContentFile             file = 6;
    ContentLocation         location = 7;
    ContentPoll             poll = 8;
    ContentSharedContact    shared_contact = 9;
  }
}

message ContentSticker {
  // Path relative to data root!
  optional string path_option = 1;
  // Original file name, might be different from a name of the stored file. Optional even if path is present.
  optional string file_name_option = 6;
  // 0 if unknown
  required int32 width = 2;
  // 0 if unknown
  required int32 height = 3;

  // Path relative to data root!
  optional string thumbnail_path_option = 4;
  optional string emoji_option = 5;
}

message ContentPhoto {
  // Path relative to data root!
  optional string path_option = 1;
  // 0 if unknown
  required int32 width = 2;
  // 0 if unknown
  required int32 height = 3;
  required bool is_one_time = 4;
}

message ContentVoiceMsg {
  // Path relative to data root!
  optional string path_option = 1;
  // Original file name, might be different from a name of the stored file. Optional even if path is present.
  optional string file_name_option = 4;
  required string mime_type = 2;
  optional int32 duration_sec_option = 3;
}

message ContentAudio {
  // Path relative to data root!
  optional string path_option = 1;
  // Original file name, might be different from a name of the stored file. Optional even if path is present.
  optional string file_name_option = 7;

  optional string title_option = 2;
  optional string performer_option = 3;

  required string mime_type = 4;
  optional int32 duration_sec_option = 5;

  // Some audio files might have thumbnails - e.g. album cover
  // Path relative to data root!
  optional string thumbnail_path_option = 6;
}

message ContentVideoMsg {
  // Path relative to data root!
  optional string path_option = 1;
  // Original file name, might be different from a name of the stored file. Optional even if path is present.
  optional string file_name_option = 8;
  // 0 if unknown
  required int32 width = 2;
  // 0 if unknown
  required int32 height = 3;

  required string mime_type = 4;
  optional int32 duration_sec_option = 5;

  // Path relative to data root!
  optional string thumbnail_path_option = 6;

  required bool is_one_time = 7;
}

message ContentVideo {
  // Path relative to data root!
  optional string path_option = 1;
  // Original file name, might be different from a name of the stored file. Optional even if path is present.
  optional string file_name_option = 10;

  optional string title_option = 8;
  optional string performer_option = 9;

  // 0 if unknown
  required int32 width = 2;
  // 0 if unknown
  required int32 height = 3;

  required string mime_type = 4;
  optional int32 duration_sec_option = 5;

  // Path relative to data root!
  optional string thumbnail_path_option = 6;

  required bool is_one_time = 7;
}

message ContentFile {
  // Path relative to data root!
  optional string path_option = 1;
  optional string file_name_option = 2;

  optional string mime_type_option = 5;

  // Path relative to data root!
  optional string thumbnail_path_option = 7;
  // Removed: width_option = 3, height_option = 4, duration_sec_option = 6, performer_option = 8
}

message ContentLocation {
  optional string title_option = 1;
  optional string address_option = 2;
  required string lat_str = 3;
  required string lon_str = 4;

  optional int32 duration_sec_option = 5;
}

message ContentPoll {
  required string question = 1;
}

// At least ONE of the fields must be present.
message ContentSharedContact {
  optional string first_name_option = 1;
  optional string last_name_option = 2;
  // Could hold multiple phone numbers separated by comma
  optional string phone_number_option = 3;
  // Path relative to data root!
  optional string vcard_path_option = 4;
}

//
// MessageService
//

message MessageServicePhoneCall {
  optional int32 duration_sec_option = 1;
  optional string discard_reason_option = 2;

  // Is sometimes populated for group calls
  repeated string members = 3;
}

message MessageServiceSuggestProfilePhoto {
  required ContentPhoto photo = 1;
}

message MessageServicePinMessage {
  required int64 message_id = 1;
}

// Note: for Telegram, `from...` is not always meaningful
message MessageServiceClearHistory {}

message MessageServiceBlockUser {
  required bool is_blocked = 1;
}

message MessageServiceStatusTextChanged {
  // Text is stored in the message itself
}

// Notification not initiated by user directly, like a birthday reminder
message MessageServiceNotice {
  // Text is stored in the message itself
}

message MessageServiceGroupCreate {
  required string title = 1;

  repeated string members = 2;
}

message MessageServiceGroupEditTitle {
  required string title = 1;
}

message MessageServiceGroupEditPhoto {
  required ContentPhoto photo = 1;
}

message MessageServiceGroupDeletePhoto {}

message MessageServiceGroupInviteMembers {
  repeated string members = 1;
}

message MessageServiceGroupRemoveMembers {
  repeated string members = 1;
}

message MessageServiceGroupMigrateFrom {
  required string title = 1;
}

// Migrate to supergroup of the same name
message MessageServiceGroupMigrateTo {}
