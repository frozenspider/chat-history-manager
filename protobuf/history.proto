syntax = "proto3";

package history;

import "scalapb/scalapb.proto";

option (scalapb.options) = {
  package_name: "org.fs.chm.protobuf"
  flat_package: true
  single_file: true
  no_default_values_in_constructor: true
  enum_value_naming: CAMEL_CASE
  enum_strip_prefix: true
};

service HistoryLoader {
  rpc ParseHistoryFile(ParseHistoryFileRequest) returns (ParseHistoryFileResponse) {}
}

service MyselfChooser {
  rpc ChooseMyself(ChooseMyselfRequest) returns (ChooseMyselfResponse) {}
}

message ParseHistoryFileRequest {
  string path = 1;
}

message ParseHistoryFileResponse {
  Dataset ds = 1 [(scalapb.field).no_box = true];

  string root_file = 2;

  User myself = 3 [(scalapb.field).no_box = true];

  // Includes myself
  repeated User users = 4;

  repeated ChatWithMessages cwms = 5;
}

message ChooseMyselfRequest {
  repeated User users = 1;
}

message ChooseMyselfResponse {
  int32 picked_option = 1;
}

message Dataset {
  PbUuid uuid = 1 [(scalapb.field).no_box = true];
  string alias = 2;
  string source_type = 3;
}

message User {
  PbUuid dsUuid = 1 [(scalapb.field).no_box = true];
  // Unique within a dataset.
  int64 id = 2;
  // If there's no first/last name separation, everything will be in first name.
  optional string first_name_option = 3;
  optional string last_name_option = 4;
  optional string username_option = 5;
  optional string phone_number_option = 6;
}

message ChatWithMessages {
  Chat chat = 1 [(scalapb.field).no_box = true];
  repeated Message messages = 2;
}

message PbUuid {
  // Should be lowercase!
  string value = 1;
}

// The request with a id of the book
message Chat {
  PbUuid dsUuid = 1 [(scalapb.field).no_box = true];
  // Unique within a dataset
  int64 id = 2;

  // Can actually be none sometimes
  optional string name_option = 3;
  ChatType tpe = 4;

  // Path relative to data root!
  optional string img_path_option = 5;

  // Always contains myself
  repeated int64 member_ids = 6;
  int32 msg_count = 7;
}

enum ChatType {
  CHAT_TYPE_PERSONAL = 0;
  CHAT_TYPE_PRIVATE_GROUP = 1;
}

/*
 * Design goal for messages - try to reuse as many fields as possible to comfortably store
 * the whole Message hierarchy in one table.
 *
 * Same applies to Content.
 */

message Message {
  option (scalapb.message).no_box = true;  // do not wrap in Option

  /**
   * Unique ID assigned to this message by a DAO storage engine (even local one), always valid and >= 0.
   * No ordering guarantees are provided in general case.
   * Might change on dataset/chat mutation operations.
   * Should NEVER be compared across different DAOs!
   */
  int64 internal_id = 1;

  /**
   * Unique within a chat, serves as a persistent ID when merging with older/newer DB version.
   * If it's not useful for this purpose, should be empty.
   */
  optional int64 source_id_option = 2;
  // Number of epoch SECONDS (not millis!)
  int64 timestamp = 3;
  int64 fromId = 4;

  repeated RichTextElement text = 5;

  // String that can be used to search this content.
  string searchable_string = 6;

  oneof typed {
    MessageRegular regular = 7;
    MessageService service = 8;
  }
}

message MessageRegular {
  // Number of epoch SECONDS (not millis!)
  optional int64 edit_timestamp_option = 1;
  optional string forward_from_name_option = 2;
  optional int64 reply_to_message_id_option = 3;
  optional Content content_option = 4;
}

message MessageService {
  oneof sealed_value_optional {
    MessageServicePhoneCall             phone_call = 1;
    MessageServiceSuggestProfilePhoto   suggest_profile_photo = 13;
    MessageServicePinMessage            pin_message = 2;
    MessageServiceClearHistory          clear_history = 3;
    MessageServiceGroupCreate           group_create = 4;
    MessageServiceGroupEditTitle        group_edit_title = 5;
    MessageServiceGroupEditPhoto        group_edit_photo = 6;
    MessageServiceGroupDeletePhoto      group_delete_photo = 12;
    MessageServiceGroupInviteMembers    group_invite_members = 7;
    MessageServiceGroupRemoveMembers    group_remove_members = 8;
    MessageServiceGroupMigrateFrom      group_migrate_from = 9;
    MessageServiceGroupMigrateTo        group_migrate_to = 10;
    MessageServiceGroupCall             group_call = 11; // TODO: Unite with PhoneCall
  }
}

message RichTextElement {
  oneof val {
    RtePlain            plain = 1;
    RteBold             bold = 2;
    RteItalic           italic = 3;
    RteUnderline        underline = 4;
    RteStrikethrough    strikethrough = 5;
    RteLink             link = 6;
    RtePrefmtInline     prefmt_inline = 7;
    RtePrefmtBlock      prefmt_block = 8;
    RteSpoiler          spoiler = 10;
  }

  // String that can be used to search this content.
  string searchable_string = 9;
}

message RtePlain {
  string text = 1;
}
message RteBold {
  string text = 1;
}
message RteItalic {
  string text = 1;
}
message RteUnderline {
  string text = 1;
}
message RteStrikethrough {
  string text = 1;
}
message RteLink {
  // Empty text would mean that this link is hidden - but it can still be hidden even if it's not.
  optional string text_option = 1;
  string href = 2;
  // Some TG chats use text_links with empty/invisible text to be shown as preview but not appear in text.
  bool hidden = 3;
}
message RtePrefmtInline {
  string text = 1;
}
message RtePrefmtBlock {
  string text = 1;
  optional string language_option = 2;
}
message RteSpoiler {
  string text = 1;
}

//
// Content
//

message Content {
  oneof sealed_value_optional {
    ContentSticker          sticker = 1;
    ContentPhoto            photo = 2;
    ContentVoiceMsg         voice_msg = 3;
    ContentVideoMsg         video_msg = 4;
    ContentAnimation        animation = 5;
    ContentFile             file = 6;
    ContentLocation         location = 7;
    ContentPoll             poll = 8;
    ContentSharedContact    shared_contact = 9;
  }
}

message ContentSticker {
  // Path relative to data root!
  optional string path_option = 1;
  // 0 if unknown
  int32 width = 2;
  // 0 if unknown
  int32 height = 3;

  // Path relative to data root!
  optional string thumbnail_path_option = 4;
  optional string emoji_option = 5;
}

message ContentPhoto {
  // Path relative to data root!
  optional string path_option = 1;
  // 0 if unknown
  int32 width = 2;
  // 0 if unknown
  int32 height = 3;
}

message ContentVoiceMsg {
  // Path relative to data root!
  optional string path_option = 1;
  string mime_type = 2;
  optional int32 duration_sec_option = 3;
}

message ContentVideoMsg {
  // Path relative to data root!
  optional string path_option = 1;
  // 0 if unknown
  int32 width = 2;
  // 0 if unknown
  int32 height = 3;

  string mime_type = 4;
  optional int32 duration_sec_option = 5;

  // Path relative to data root!
  optional string thumbnail_path_option = 6;
}

message ContentAnimation {
  // Path relative to data root!
  optional string path_option = 1;
  // 0 if unknown
  int32 width = 2;
  // 0 if unknown
  int32 height = 3;

  string mime_type = 4;
  optional int32 duration_sec_option = 5;

  // Path relative to data root!
  optional string thumbnail_path_option = 6;
}

message ContentFile {
  // Path relative to data root!
  optional string path_option = 1;
  string title = 2;
  // 0 if relevant but unknown
  optional int32 width_option = 3;
  // 0 if relevant but unknown
  optional int32 height_option = 4;

  optional string mime_type_option = 5;
  optional int32 duration_sec_option = 6;

  // Path relative to data root!
  optional string thumbnail_path_option = 7;

  optional string performer_option = 8;
}

message ContentLocation {
  optional string title_option = 1;
  optional string address_option = 2;
  string lat_str = 3;
  string lon_str = 4;

  optional int32 duration_sec_option = 5;
}

message ContentPoll {
  string question = 1;
}

// At least ONE of the fields must be present.
message ContentSharedContact {
  optional string first_name_option = 1;
  optional string last_name_option = 2;
  optional string phone_number_option = 3;
  // Path relative to data root!
  optional string vcard_path_option = 4;
}

//
// MessageService
//

message MessageServicePhoneCall {
  optional int32 duration_sec_option = 1;
  optional string discard_reason_option = 2;
}

message MessageServiceSuggestProfilePhoto {
  ContentPhoto photo = 1 [(scalapb.field).no_box = true];
}

message MessageServicePinMessage {
  int64 message_id = 1;
}

// Note: for Telegram, `from...` is not always meaningful
message MessageServiceClearHistory {}

message MessageServiceGroupCreate {
  string title = 1;
  repeated string members = 2;
}

message MessageServiceGroupEditTitle {
  string title = 1;
}

message MessageServiceGroupEditPhoto {
  ContentPhoto photo = 1 [(scalapb.field).no_box = true];
}

message MessageServiceGroupDeletePhoto {
}

message MessageServiceGroupInviteMembers {
  repeated string members = 1;
}

message MessageServiceGroupRemoveMembers {
  repeated string members = 1;
}

message MessageServiceGroupMigrateFrom {
  string title = 1;
}

// Migrate to supergroup of the same name
message MessageServiceGroupMigrateTo {
}

// This is different to PhoneCall
message MessageServiceGroupCall {
  repeated string members = 1;
}
